name: Make Website
     
defaults:
  run:
    shell: bash -l {0}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          pdf2svg \
          inkscape \
          imagemagick
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: 3.6 # Or your desired version
        # mamba-version: "*" # Optional: for faster solving
        # channels: conda-forge,defaults # Optional
        activate-environment: clowder_py36_env # Activate here
        # Or create an environment from a file:
        # environment-file: environment.yml

    - name: Setup the LaTeX environment
      uses: teatimeguest/setup-texlive-action@v3
      with:
        packages: |
          scheme-full
          hyperref
          microtype
  # `pdflatex` is now available
  # along with hyperlink and microtypography support.
    - name: Initialize repository, installing depencies and such
      run: make init
     
    - name: Run server, mirror with wget, and package
      id: mirror_site
      run: |
        set -e # Exit immediately if a command exits with a non-zero status.

        echo "Running 'make web-and-serve' in the background..."
        make web-and-serve &
        server_pid=$! # PID of the background 'make' process
        echo "Server process (make) PID: $server_pid"

        echo "Waiting for Flask server to start..."
        # Wait and then poll for server readiness
        sleep 5400 # Initial sleep for server to attempt startup
          
        max_retries=12 # 1 hour
        retry_interval=300
        retry_count=0
        until curl -s -f -o /dev/null http://127.0.0.1:5000/; do
          retry_count=$((retry_count+1))
          if [ $retry_count -ge $max_retries ]; then
            echo "Flask server (http://127.0.0.1:5000/) failed to start or is not reachable after $max_retries retries."
            echo "Attempting to kill server PID $server_pid and its process group..."
            # Try to kill the process group first, then the specific PID
            kill -- -$server_pid 2>/dev/null || kill $server_pid 2>/dev/null || echo "Failed to send kill signal (server might be already down)."
            exit 1
          fi
          echo "Server not up yet. Retrying in $retry_interval seconds... (Attempt $retry_count/$max_retries)"
          sleep $retry_interval
        done
        echo "Flask server is up and running on http://127.0.0.1:5000/."
        output_dir="web-clone"
        echo "Cleaning up old $output_dir (if any) and creating fresh."
        rm -rf "$output_dir"
        mkdir -p "$output_dir"

        echo "Cloning site with wget to $output_dir..."
        make wget-clone
        
        echo "Site cloned to $output_dir."

        echo "Stopping server (PID: $server_pid) and its process group..."
        # Send SIGTERM to the entire process group of server_pid
        # This is generally more effective for 'make' commands that spawn children.
        kill -- -$server_pid 2>/dev/null || kill $server_pid 2>/dev/null || echo "Kill signal sent (process $server_pid might have already exited)."
          
        # Wait for the process to terminate
        timeout_seconds=15
        echo "Waiting up to $timeout_seconds seconds for server to stop..."
        end_time=$(($(date +%s) + timeout_seconds))
        while ps -p $server_pid > /dev/null && [ $(date +%s) -lt $end_time ]; do
          sleep 1
        done

        if ps -p $server_pid > /dev/null; then
          echo "Server (PID: $server_pid) did not stop gracefully with SIGTERM. Sending SIGKILL to process group."
          kill -9 -- -$server_pid 2>/dev/null || kill -9 $server_pid 2>/dev/null || echo "Failed to SIGKILL server process $server_pid (might be already gone)."
          sleep 2 # Give SIGKILL time
        else
          echo "Server (PID: $server_pid) stopped."
        fi

        # Verify wget success by checking for a key file
        if [ ! -f "${output_dir}/index.html" ]; then
          echo "Error: wget failed to download index.html into ${output_dir}/"
          echo "Contents of ${output_dir} for debugging:"
          ls -R "$output_dir"
          exit 1
        fi
        echo "Successfully mirrored website."

    - name: Upload website artifact
      uses: actions/upload-artifact@v4
      with:
        name: static-website # Name of the artifact
        path: web-clone/     # Path to the directory to upload
        if-no-files-found: error # Fail if the directory is empty or not found
