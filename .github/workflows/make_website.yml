name: Make Website
     
defaults:
  run:
    shell: bash -l {0}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          pdf2svg \
          inkscape \
          imagemagick
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: 3.6 # Or your desired version
        # mamba-version: "*" # Optional: for faster solving
        # channels: conda-forge,defaults # Optional
        activate-environment: clowder_py36_env # Activate here
        # Or create an environment from a file:
        # environment-file: environment.yml

    - name: Setup the LaTeX environment
      uses: teatimeguest/setup-texlive-action@v3
      with:
        packages: |
          scheme-full
          hyperref
          microtype
  # `pdflatex` is now available
  # along with hyperlink and microtypography support.
    - name: Initialize repository, installing dependencies and such
      run: make init
      
    - name: Compile pictures
      run: make pictures

    - name: Compile PDF
      run: |
        make tags-alegreya-sans-tcb
        cp "output/tags-book/alegreya-sans-tcb.pdf" gerby-website/gerby/tools/stacks.pdf
     
    - name: Run server, mirror with wget, and package
      id: mirror_site
      run: |
        set -e # Exit immediately if a command exits with a non-zero status.

        echo "Running 'make web-and-serve' in the background..."
        make web-and-serve &
        server_pid=$! # PID of the background 'make' process
        echo "Server process (make) PID: $server_pid"

        echo "Waiting for Flask server to start..."
        # Wait and then poll for server readiness
        sleep 5400 # Initial sleep for server to attempt startup
          
        max_retries=12 # 1 hour
        retry_interval=300
        retry_count=0
        until curl -s -f -o /dev/null http://127.0.0.1:5000/; do
          retry_count=$((retry_count+1))
          if [ $retry_count -ge $max_retries ]; then
            echo "Flask server (http://127.0.0.1:5000/) failed to start or is not reachable after $max_retries retries."
            echo "Attempting to kill server PID $server_pid and its process group..."
            # Try to kill the process group first, then the specific PID
            kill -- -$server_pid 2>/dev/null || kill $server_pid 2>/dev/null || echo "Failed to send kill signal (server might be already down)."
            exit 1
          fi
          echo "Server not up yet. Retrying in $retry_interval seconds... (Attempt $retry_count/$max_retries)"
          sleep $retry_interval
        done
        echo "Flask server is up and running on http://127.0.0.1:5000/."
        output_dir="web-clone"
        echo "Cleaning up old $output_dir (if any) and creating fresh."
        rm -rf "$output_dir"
        mkdir -p "$output_dir"

        echo "Cloning site with wget to $output_dir..."
        make wget-clone
        ls
        
    - name: Display Build Statistics in Job Summary
      # This step will run even if later steps fail, but only if the compilation was successful.
      if: always() && env.BUILD_SUCCESS == 'true'
      run: |
        echo "### Build & Compilation Statistics" >> $GITHUB_STEP_SUMMARY
        echo "| Metric          | Duration (seconds) |" >> $GITHUB_STEP_SUMMARY
        echo "|:----------------|-------------------:|" >> $GITHUB_STEP_SUMMARY
        echo "| TeX Compilation | **${{ env.TEX_DURATION }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| Tag Generation  | **${{ env.TAGS_DURATION }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| TikZ-CD         | **${{ env.TIKZCD_DURATION }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| plasTeX         | **${{ env.PLASTEX_DURATION }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| Gerby           | **${{ env.GERBY_DURATION }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Time** | **${{ env.TOTAL_DURATION }}** |" >> $GITHUB_STEP_SUMMARY

    - name: Configure GitHub Pages
      # Only run these steps for pushes to the main branch to avoid deploying on PRs
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5

    # Upload artifact for GitHub Pages deployment
    - name: Upload GitHub Pages artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        # Path to the directory containing your static website files
        path: ./web-clone
        
  # New job to deploy to GitHub Pages
  deploy:
    needs: build # Depends on the build job completing successfully
    permissions:
      pages: write      # Required to deploy to GitHub Pages
      id-token: write   # Required for OIDC token authentication

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Sets the deployment URL in the GitHub environment

    runs-on: ubuntu-latest
    # Only run this job for pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
